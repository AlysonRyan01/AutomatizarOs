@using AutomatizarOs.Core.Enums
@using AutomatizarOs.Core.Handlers
@using AutomatizarOs.Core.Models
@using AutomatizarOs.Core.Requests.ServiceOrderRequests
@using MudBlazor

<MudDialog>
    <TitleContent>
        <h2 class="font-extrabold text-lg lg:text-2xl font-sans text-[#750303]">ADICIONAR CONSERTO OS: @ServiceOrder.Id</h2>
    </TitleContent>
    <DialogContent>
        <div class="flex flex-col w-full gap-3 border-t border-b border-[#dfdfdf] my-4">
            <h2 class="font-bold uppercase text-lg font-sans text-[#750303] mt-3 mb-3">EMPRESA: @ServiceOrder.EEnterprise</h2>
        </div>
        <div class="flex flex-col w-full gap-3 border-b border-[#dfdfdf] my-4">
            <h2 class="font-bold uppercase text-lg font-sans text-[#750303] mt-3">DADOS DO CLIENTE</h2>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">NOME:</span> @ServiceOrder.Customer.Name</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">ENDEREÇO:</span> @ServiceOrder.Customer.Street, @ServiceOrder.Customer.Number, @ServiceOrder.Customer.Neighborhood</p>
            <p class="font-normal uppercase font-sans mb-3"><span class="font-bold font-sans text-[#750303]">TELEFONE:</span> @ServiceOrder.Customer.Phone</p>
        </div>
        <div class="flex flex-col w-full gap-3 border-b border-[#dfdfdf] my-4">
            <h2 class="font-bold text-lg font-sans text-[#750303] mt-3">DADOS DO PRODUTO</h2>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">TIPO:</span> @ServiceOrder.ProductType</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">MARCA:</span> @ServiceOrder.ProductBrand</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">MODELO:</span> @ServiceOrder.ProductModel</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">SÉRIE:</span> @ServiceOrder.ProductSerialNumber</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">DEFEITO:</span> @ServiceOrder.ProductDefect</p>
            <p class="font-normal uppercase font-sans mb-3"><span class="font-bold font-sans text-[#750303]">DATA DE ENTRADA:</span> @ServiceOrder.EntryDate.ToString("dd/MM/yyyy")</p>
            <p class="font-normal uppercase font-sans mt-3"><span class="font-bold font-sans text-[#750303]">PRATELEIRA:</span> @ServiceOrder.Location</p>
            <LocationButton ServiceOrder="ServiceOrder" OnLocationChanged="AtualizarPrateleira"></LocationButton>
        </div>
        <div class="flex flex-col w-full gap-3 border-b border-[#dfdfdf] my-4">
            <h2 class="font-bold text-lg font-sans text-[#750303] mt-3">INFORMAÇÕES SOBRE O ORÇAMENTO</h2>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">SOLUÇÃO:</span> @ServiceOrder.Solution</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">VALOR:</span> @ServiceOrder.Amount</p>
            <p class="font-normal uppercase font-sans mb-3"><span class="font-bold font-sans text-[#750303]">ORÇAMENTO FEITO EM:</span> @ServiceOrder.InspectionDate</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">SITUAÇÃO:</span> @Situacao</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">TEM CONSERTO:</span> @TemConserto</p>
            <p class="font-normal uppercase font-sans"><span class="font-bold font-sans text-[#750303]">RESPOSTA DO CLIENTE:</span> @Resposta</p>
        </div>
        <div class="flex flex-row w-full gap-3 mb-[50px]">
            <MudButton @onclick="Consertado"
                       EndIcon="@Icons.Material.Filled.Done"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="text-white text-lg font-semibold py-2 px-5 rounded-lg transition">
                CONSERTADO
            </MudButton>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public ServiceOrder ServiceOrder { get; set; } = new ();
    [Parameter] public EventCallback OnConsertoAdded { get; set; }
    [Inject] public IServiceOrderHandler ServiceOrderHandler { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    public async Task Consertado()
    {
        try
        {
            var result = await ServiceOrderHandler.AddRepairById(ServiceOrder.Id);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Conserto concluído com sucesso!", Severity.Success);
                await OnConsertoAdded.InvokeAsync();
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                Snackbar.Add(result.Message ?? "Ocorreu um erro ao concluir o conserto!", Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
    
    public string Situacao =>
        ServiceOrder.EServiceOrderStatus switch
        {
            EServiceOrderStatus.Entered => "Avaliação pendente",
            EServiceOrderStatus.Evaluated => "Avaliado",
            EServiceOrderStatus.Repaired => "Consertado",
            EServiceOrderStatus.Delivered => "Entregue",
            _ => "Desconhecido"
        };
    
    public string TemConserto =>
        ServiceOrder.EUnrepaired switch
        {
            EUnrepaired.Repair => "Sim",
            EUnrepaired.Unrepaired => "Não",
            EUnrepaired.NoDefectFound => "Não apresentou defeito",
            _ => "Desconhecido"
        };
    
    public string Resposta =>
        ServiceOrder.ERepair switch
        {
            ERepair.Entered => "Sem orçamento ainda",
            ERepair.Waiting => "Aguardando resposta",
            ERepair.Approved => "Aprovado",
            ERepair.Disapproved => "Não aprovou",
            _ => "Desconhecido"
        };
    
    private async Task AtualizarPrateleira()
    {
        var result = await ServiceOrderHandler.GetCloudServiceOrder(ServiceOrder.Id);
        if (result.IsSuccess)
        {
            if (result.Data != null)
            {
                ServiceOrder.Location = result.Data.Location;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Ocorreu um erro ao obter a ordem de serviço", Severity.Error);
            }
        }
    }
}